// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email              String           @unique
  // password String
  fullName           String
  picture            String?
  pictureId          String?
  country            String?
  pushNotificationId String?
  collections        Collection[]
  imports            Import[]
  ImportLocation     ImportLocation[]
}

model Collection {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  image       String?
  imageId     String?
  isPublic    Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  imports Import[]
}

model Import {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title           String
  thumbnail       String?
  duration        Float?
  type            String?
  status          String  @default("Importing")
  socialMediaType String?
  videoUrl        String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  places      Place[]
  restaurants Restaurant[]
}

model Place {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String?
  description String?
  emoji       String?
  photo       String?

  import   Import @relation(fields: [importId], references: [id])
  importId String

  importLocationId String?
  ImportLocation   ImportLocation[]
}

model Restaurant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String?
  description String?
  emoji       String?
  photo       String?

  import   Import @relation(fields: [importId], references: [id])
  importId String

  importLocationId String?
  ImportLocation   ImportLocation[]
}

model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name             String?
  placeId          String?
  googleId         String?
  city             String?
  country          String?
  flag             String?
  emoji            String?
  coordinates      String?
  address          String?
  bestTimeToVisit  String?
  typicalTimeSpent String?
  businessStatus   String?
  locationLink     String?
  type             String?
  description      String?
  openingHours     String?
  phone            String?
  website          String?
  reviewsCount     Int?
  reviewsAverage   Float?
  priceRange       String?
  photo            String?
  ImportLocation   ImportLocation[]
}

model ImportLocation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  place   Place?  @relation(fields: [placeId], references: [id])
  placeId String?

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tips          ImportLocationTip[]
  highlights    ImportLocationHighlight[]
  categories    ImportLocationCategory[]
  mustTryDishes ImportLocationMustTryDish[]
}

model ImportLocationTip {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tip String

  importLocation   ImportLocation @relation(fields: [importLocationId], references: [id])
  importLocationId String
}

model ImportLocationHighlight {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  highlight String

  importLocation   ImportLocation @relation(fields: [importLocationId], references: [id])
  importLocationId String
}

model ImportLocationCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category String

  importLocation   ImportLocation @relation(fields: [importLocationId], references: [id])
  importLocationId String
}

model ImportLocationMustTryDish {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dish String

  importLocation   ImportLocation @relation(fields: [importLocationId], references: [id])
  importLocationId String
}

// model UserScratchedCard {
//   id          Int         @id @default(autoincrement())
//   createdAt   DateTime    @default(now())
//   user        User        @relation(fields: [userId], references: [id])
//   userId      Int
//   card        ScratchCard @relation(fields: [cardId], references: [id])
//   cardId      Int
//   isScratched Boolean?    @default(false)

//   @@unique([userId, cardId])
// }

// model ScratchCard {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())

//   title         String
//   description   String?
//   picture       String
//   category      Categories          @default(EASY)
//   userScratches UserScratchedCard[]
// }

// enum Categories {
//   EASY
//   MEDIUM
//   HARD
// }

// model User {
//   id Int @id @default(autoincrement())
//   username String @unique
//   displayName String? @default("")
//   userSettings UserSettings?
//   posts Post[]
//   groupPosts UserGroupPosts[]
// }

// model UserSettings {
//   id Int @id @default(autoincrement())
//   notificationsEnabled Boolean
//   smsEnabled Boolean
//   user User @relation(fields: [userId], references: [id])
//   userId Int @unique
// }

// model GroupPost {
//   id Int @id @default(autoincrement())
//   title String
//   description String
//   users UserGroupPosts[]
// }

// model UserGroupPosts {
//   user User @relation(fields: [userId], references: [id])
//   userId Int
//   groupPost GroupPost @relation(fields: [groupPostId], references: [id])
//   groupPostId Int

//   @@id ([userId, groupPostId])
// }

// model Post {
//   id Int @id @default(autoincrement())
//   title String
//   description String
//   user User @relation(fields: [userId], references: [id])
//   userId Int
// }
